#!/bin/bash

# Author: Toni Mertanen
# Created: 14.7.2024
# Last modified: 6.11.2024
# Version: 5.1.0

# Description: This script is used to automate the process of initializing npm/typescript/prettier/eslint/
# ts-node/express/nodemon/browser-sync/dotenv and type libraries for express/node/mocha/chai for JavaScript 
# project or pylint/mypy/black for Python project and initializing git and creating the .gitignore, linking 
# the local repo with the remote one, adding and committing the changes with user given message to the the
# remote repository. If typescript is installed it also adds predev script which run automatically when 
# npm run dev is used. The script will start tsc compiling in watch mode. When npm run dev is used it will 
# start nodemon and browser syncing. With script it is also possible to automate running of code formatter 
# and linter before each git commit. Script will run the necessary commands and ask for user input when needed.

# Usage: ./gauto - The script will check the state of git/npm/tsc initialization and ask for user input when needed.

# Function to check if npm package is installed
check_npm_package() {
	package_name=$1
	# Check if the package is installed locally
	npm ls $package_name >/dev/null 2>&1
	local_status=$?
	# Check if the package is installed globally
	npm ls -g $package_name >/dev/null 2>&1
	global_status=$?
	# If neither local nor global installation exists, return 1
	if [ $local_status -ne 0 ] && [ $global_status -ne 0 ]; then
		return 1
	else
		return 0
	fi
}

# Define the default entries that should be in ignore files
default_entries=(
	"venv/"
	".idea/"
	".git/"
	"node_modules/"
	".vscode"
	".DS_Store"
	"config.codekit3"
	".gitignore"
	"dist/"
	"Thumbs.db"
	".eslintcache"
	".env_gauto"
	".env"
)

# Load environment variables from the .env file
[ -f .env_gauto ] && source .env_gauto || touch .env_gauto # Create .env_gauto if it doesn't exist

# Initialize defaults in .env_gauto if they don't exist
for var in LANGUAGE_INITIALIZED HOOKS_INITIALIZED; do
	if [ -z "${!var}" ]; then
		echo "$var=false" >>.env_gauto
		export "$var=false"
	fi
done

# Checks which one is used in current project - JavaScript or Python
if [[ "$LANGUAGE_INITIALIZED" == "false" ]]; then
	echo "--------------------------------------------------"
	read -p "which will be used in this project - Python or JS or Neither? (p/j/n): " language_selection
	sed -i '' '/LANGUAGE_INITIALIZED/d' .env_gauto
	echo "LANGUAGE_INITIALIZED=true" >>.env_gauto
	export LANGUAGE_INITIALIZED=true
	if [[ "$language_selection" =~ ^[Jj]$ ]]; then
		echo "JavaScript selected for project."
		echo "LANGUAGE=js" >>.env_gauto
		export LANGUAGE=js
	elif [[ "$language_selection" =~ ^[Pp]$ ]]; then
		echo "Python selected for project."
		echo "LANGUAGE=python" >>.env_gauto
		export LANGUAGE=python
	else
		echo "Neither JS or Python selected for project."
		echo "LANGUAGE=neither" >>.env_gauto
		export LANGUAGE=neither
	fi
fi
echo "--------------------------------------------------"

# Check if NPM is initialized
if [ ! -f package.json ] && [[ "$LANGUAGE" == "js" ]]; then
	echo "--------------------------------------------------"
	read -p "npm is not initialized. would you like to initialize npm? (y/n): " init_npm
	if [[ "$init_npm" =~ ^[Yy]$ ]]; then
		read -p "install npm silent/fast or with prompts? (s/p): " init_npm_silent
		if [[ "$init_npm_silent" =~ ^[Pp]$ ]]; then
			npm init
		else
			npm init -y >/dev/null 2>&1
		fi	
		echo "--------------------------------------------------"
		echo "npm has been initialized (package.json created)."
		# Add start script to the scripts section
		jq '.scripts += {
		"start": "node ./dist/App.js",
		}' package.json >tmp.json && mv tmp.json package.json >/dev/null 2>&1
		echo "--------------------------------------------------"
		echo "Added start script in package.json"
		echo "--------------------------------------------------"
		# check if express is installed
		if ! check_npm_package "express"; then
			read -p "would you like to install express? (y/n): " init_express
			if [[ "$init_express" =~ ^[Yy]$ ]]; then
				npm i express >/dev/null 2>&1
				echo "express has been installed."
				echo "--------------------------------------------------"
			else
				echo "express was not installed."
				echo "--------------------------------------------------"
			fi
		fi
		# check if dotenv is installed
		if ! check_npm_package "dotenv"; then
			read -p "would you like to install dotenv? (y/n): " init_dotenv
			if [[ "$init_dotenv" =~ ^[Yy]$ ]]; then
				npm i dotenv >/dev/null 2>&1
				echo "dotenv has been installed."
				echo "--------------------------------------------------"
			else
				echo "dotenv was not installed."
				echo "--------------------------------------------------"
			fi
		fi
		# check if nodemon is installed
		if ! check_npm_package "nodemon"; then
			read -p "would you like to install nodemon? (y/n): " init_nodemon
			if [[ "$init_nodemon" =~ ^[Yy]$ ]]; then
				npm i nodemon --save-dev >/dev/null 2>&1
				echo "nodemon has been installed."
				echo "--------------------------------------------------"
				# Add dev script to the scripts section
				jq '.scripts += {
  				"dev": "nodemon ./src/App.ts"
				}' package.json >tmp.json && mv tmp.json package.json
				echo "Added dev script in package.json"
				echo "--------------------------------------------------"
				# check if browser-sync is installed
				if ! check_npm_package "browser-sync"; then
					read -p "would you like to install browser-sync for browser reloading with nodemon? (y/n): " init_browser_sync
					if [[ "$init_browser_sync" =~ ^[Yy]$ ]]; then
						npm install browser-sync concurrently --save-dev >/dev/null 2>&1
						touch bs-config.js >/dev/null 2>&1

						# Use a here-document to avoid issues with escaping in echo
						cat <<EOL >bs-config.js
const serverPort = process.env.PORT || 3000;

module.exports = {
  proxy: \`http://localhost:${serverPort}\`, // Proxy your Express server
  port: 4000, // BrowserSyncâ€™s port
  files: ["src/**/*.ts"], // Watch files for changes
  injectChanges: true, // Enable injecting changes
  reloadOnRestart: true, // Reload the browser when BS restarts
  reloadDebounce: 700,
};
EOL

						# Use jq to add the dev script with extra trailing comma
						jq '.scripts += {"dev": "concurrently \"nodemon --exec ts-node ./src/App.ts\" \"browser-sync ./src/App.ts --config bs-config.js\""
,}' package.json >tmp.json && mv tmp.json package.json
						echo "Updated dev script in package.json"
						echo "browser-sync has been installed."
						echo "--------------------------------------------------"
					else
						echo "browser-sync was not installed."
						echo "--------------------------------------------------"
					fi
				fi

			else
				echo "nodemon was not installed."
				echo "--------------------------------------------------"
			fi
		fi
	else
		echo "npm was not initialized."
		echo "--------------------------------------------------"
	fi
fi

# Check if TypeScript is installed/initialized
if [ ! -f tsconfig.json ] && [[ "$LANGUAGE" == "js" ]]; then
	echo "--------------------------------------------------"
	# Check if 'tsc' command is available
	read -p "TypeScript is not installed and/or initialized. Would you like to initialize TypeScript? (y/n): " init_tsc
	if [[ "$init_tsc" =~ ^[Yy]$ ]]; then
		# Install TypeScript
		if ! command -v tsc &>/dev/null; then
			npm install typescript >/dev/null 2>&1
			echo "TypeScript is now installed."
			echo "--------------------------------------------------"
		fi
		# Initialize TypeScript
		tsc --init >/dev/null 2>&1
		echo "TypeScript has been initialized (tsconfig.json created)."
		echo "--------------------------------------------------"
		jq '.scripts += {"predev": "tsc -w &"}' package.json >tmp.json && mv tmp.json package.json
		echo "TSC watch mode activation added to predev script in package.json."
		echo "--------------------------------------------------"

		# Create src and dist directories
		mkdir -p src dist
		echo "Directories 'src' and 'dist' have been created."
		echo "--------------------------------------------------"
		touch src/App.ts
		echo "File 'App.ts' has been created in 'src' directory."
		echo "--------------------------------------------------"
		# Edit tsconfig.json to set rootDir and outDir
		# Uncomment and modify the "rootDir" and "outDir" lines
		sed -i '' 's|// "rootDir":.*|  "rootDir": "./src",|' tsconfig.json
		sed -i '' 's|// "outDir":.*|  "outDir": "./dist",|' tsconfig.json
		sed -i '' 's|// "experimentalDecorators": true,|  "experimentalDecorators": true,|' tsconfig.json
		echo "tsconfig.json has been updated: rootDir is './src', outDir is './dist'."
		echo "tsconfig.json has been also updated: experimentalDecorators has been set to true."
		echo "--------------------------------------------------"
		npm i --save-dev @types/mocha @types/chai >/dev/null 2>&1
		npm i --save-dev ts-node @types/node @types/express >/dev/null 2>&1
		echo "Types libraries for mocha chai node and express installed."
		echo "TS-node for running ts files without compiling installed."
		echo "--------------------------------------------------"
	else
		echo "TypeScript was not initialized."
		echo "--------------------------------------------------"
	fi
fi

# Check if Prettier is initialized
if [[ "$LANGUAGE" == "js" ]] && ! check_npm_package "prettier"; then
	echo "--------------------------------------------------"
	read -p "prettier is not installed and/or initialized. Would you like to install and initialize it? (y/n): " init_prettier
	if [[ "$init_prettier" =~ ^[Yy]$ ]]; then
		npm install --save-dev --save-exact prettier >/dev/null 2>&1
		node --eval "fs.writeFileSync('.prettierrc','{}\n')" 2>&1
		[ -f .prettierignore ] || touch .prettierignore
		prettier_ignore_file=".prettierignore"
		for item in "${default_entries[@]}"; do
			# Check if the item is not in the .prettierignore file
			if ! grep -Fxq "$item" "$prettier_ignore_file"; then
				# If not, append the item to the .prettierignore file
				echo "$item" >>"$prettier_ignore_file"
			fi
		done
		for item in "eslint.config.mjs" "tsconfig.json"; do
			# Check if the item is not in the .prettierignore file
			if ! grep -Fxq "$item" "$prettier_ignore_file"; then
				# If not, append the item to the .prettierignore file
				echo "$item" >>"$prettier_ignore_file"
			fi
		done
		echo "prettier has been installed and initialized."
		echo "--------------------------------------------------"
	else
		echo "prettier was not installed/initialized."
		echo "--------------------------------------------------"
	fi
fi

# Check if ESLint is initialized
if [[ "$LANGUAGE" == "js" ]] && ! check_npm_package "eslint"; then
	echo "--------------------------------------------------"
	read -p "eslint is not installed and/or initialized. Would you like to install and initialize it? (y/n): " init_eslint
	if [[ "$init_eslint" =~ ^[Yy]$ ]]; then
		npx eslint --init && sed -i '' '/export default/a\
  			{ ignores: ["venv/", ".idea/", ".git/", "node_modules/", ".vscode", ".DS_Store", "config.codekit3", ".gitignore", "dist/", "Thumbs.db", ".eslintcache", ".env_gauto", "test/", "tests/", "bs-config.js", "tsconfig.json", "*.mjs", "*.min.js"] },' eslint.config.mjs
		echo "eslint has been installed and initialized."
		echo "--------------------------------------------------"
	else
		echo "eslint was not installed."
		echo "--------------------------------------------------"
	fi
fi

# Check if Black is initialized
if [[ "$LANGUAGE" == "python" ]] && ! check_npm_package "black"; then
	echo "--------------------------------------------------"
	if [[ "$init_black" =~ ^[Yy]$ ]]; then
		pip install black 2>&1
		echo "black has been installed."
		echo "--------------------------------------------------"
	else
		echo "black was not installed."
		echo "--------------------------------------------------"
	fi
fi

# Check if Mypy is initialized
if [[ "$LANGUAGE" == "python" ]] && ! check_npm_package "mypy"; then
	echo "--------------------------------------------------"
	read -p "mypy is not installed. Would you like to install and initialize it? (y/n): " init_mypy
	if [[ "$init_mypy" =~ ^[Yy]$ ]]; then
		python3 -m pip install mypy 2>&1
		echo "mypy has been installed."
		echo "--------------------------------------------------"
	else
		echo "mypy was not installed."
		echo "--------------------------------------------------"
	fi
fi

# Check if Pylint is initialized
if [[ "$LANGUAGE" == "python" ]] && ! check_npm_package "pylint"; then
	echo "--------------------------------------------------"
	read -p "pylint is not initialized. Would you like to install and initialize it? (y/n): " init_pylint
	if [[ "$init_pylint" =~ ^[Yy]$ ]]; then
		python3 -m pip install mypy 2>&1
		echo "pylint has been installed."
		echo "--------------------------------------------------"
	else
		echo "pylint was not installed."
		echo "--------------------------------------------------"
	fi
fi

# Check if the current directory is a git repository
if [ ! -d .git ] && ! check_npm_package "git"; then
	read -p "Git is not initialized. Would you like to initialize Git? (y/n): " init_git
	if [[ "$init_git" =~ ^[Yy]$ ]]; then
		echo "Initializing git..."
		git init >/dev/null 2>&1
		echo "Git initialized."
		echo "--------------------------------------------------"
	else
		echo "Git was not initialized."
		echo "--------------------------------------------------"
	fi
fi

# Check if Hooks are initialized
if [[ "$HOOKS_INITIALIZED" == "false" ]] && [[ "$LANGUAGE" != "neither" ]] && [ -d .git ]; then
	echo "--------------------------------------------------"
	read -p "hooks are not initialized. Would you like to install and initialize precommit hooks? (y/n): " init_hooks
	sed -i '' '/HOOKS_INITIALIZED/d' .env_gauto # Remove old entry
	echo "HOOKS_INITIALIZED=true" >>.env_gauto
	export HOOKS_INITIALIZED=true
	if [[ "$init_hooks" =~ ^[Yy]$ ]]; then
		if [[ "$LANGUAGE" == "python" ]]; then
			[ ! -f .git/hooks/pre-commit ] && touch .git/hooks/pre-commit && chmod +x .git/hooks/pre-commit
			precommitfile=".git/hooks/pre-commit"
			for item in "black ." "mypy ." "pylint ."; do
				# Check if the item is not in the pre-commit file file
				if ! grep -Fxq "$item" "$precommitfile"; then
					# If not, append the item to the pre-commit file file
					echo "$item" >>"$precommitfile"
				fi
			done
			echo "hooks have been installed."
			echo "--------------------------------------------------"
		elif [[ "$LANGUAGE" == "js" ]]; then
			[ ! -f .git/hooks/pre-commit ] && touch .git/hooks/pre-commit && chmod +x .git/hooks/pre-commit
			precommitfile=".git/hooks/pre-commit"
			for item in "npx prettier --write ." "npx eslint . --fix"; do
				# Check if the item is not in the pre-commit file file
				if ! grep -Fxq "$item" "$precommitfile"; then
					# If not, append the item to the pre-commit file file
					echo "$item" >>"$precommitfile"
				fi
			done
			echo "hooks have been installed."
			echo "--------------------------------------------------"
		fi
	else
		echo "hooks were not installed."
		echo "--------------------------------------------------"
	fi
fi

if [ -d .git ]; then
	# Check if the local repository is linked with the remote one
	a=$(git remote)
	b=origin
	if [ "$a" != "$b" ]; then
		echo "Linking the local repository with the remote one..."
		echo "Enter the URL of the remote repository: "
		read url
		git remote add origin $url
		echo "Local repository linked with the remote one."
		echo "--------------------------------------------------"
		git branch -M main
		echo "Branch renamed to main."
		echo "--------------------------------------------------"
	fi

	# Check if the .gitignore file exists
	# Flag to track if any changes were made
	changes_made=false

	if [ ! -f .gitignore ]; then
		echo "Creating .gitignore..."

		# Create the default .gitignore
		for entry in "${default_entries[@]}"; do
			echo "$entry" >>.gitignore
		done
		changes_made=true

		echo ".gitignore created."
	else
		echo ".gitignore already exists."
		echo "--------------------------------------------------"
		# Check if all default entries are present, and add any that are missing
		missing_entries=()
		for entry in "${default_entries[@]}"; do
			if ! grep -qx "$entry" .gitignore; then
				missing_entries+=("$entry")
			fi
		done

		if [ ${#missing_entries[@]} -gt 0 ]; then
			echo "Adding missing default entries to .gitignore:"
			for entry in "${missing_entries[@]}"; do
				echo "$entry" >>.gitignore
				echo "Added: $entry"
			done
			changes_made=true
			echo "--------------------------------------------------"
		else
			echo "No missing entries in .gitignore."
			echo "--------------------------------------------------"
		fi
	fi
	# Display updated .gitignore contents only if there were changes
	if [ "$changes_made" = true ]; then
		echo "Updated .gitignore contents:"
		cat .gitignore
		echo "--------------------------------------------------"
	fi
fi

# Check if there are any changes to commit
if [ -d .git ] && [ -n "$(git add . -n)" ]; then
	echo "Adding and committing the changes..."
	echo "Enter the commit message: "
	read message
	git add .
	git commit -m "$message" > /dev/null
	echo "Changes added and committed."
	echo "--------------------------------------------------"

	# Push the possible changes to the remote repository
	echo "Git push state..."
	if [ -z "$(git branch -r)" ]; then
		git push -uq origin main >/dev/null 2>&1
	else
		git push -q >/dev/null 2>&1
	fi
elif [ -d .git ]; then
	echo "No changes to commit."
	echo "--------------------------------------------------"
fi

echo "--------------------------------------------------"
echo "             All automation done!"
echo "--------------------------------------------------"

exit 0
