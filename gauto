#!/bin/bash

# Author: Toni Mertanen
# Created: 14.7.2024
# Last modified: 4.10.2024

# Description: This script is used to automate the process of initializing npm/tsc/git and creating the .gitignore, 
# linking the local repo with the remote one, adding and committing the changes with user given message to the 
# remote repository. It will run the necessary commands and ask for user input when needed.

# Usage: ./gauto - The script will check the state of git/npm/tsc initialization and ask for user input when needed. 

# Check if package.json exists
if [ ! -f package.json ]; then
    echo "--------------------------------------------------"
    read -p "npm is not initialized. Would you like to initialize npm? (y/n): " init_npm
    if [[ "$init_npm" =~ ^[Yy]$ ]]; then
        npm init
        echo "npm has been initialized (package.json created)."
        
        # Add start script to package.json
        if grep -q '"scripts"' package.json; then
            # Ensure comma after the test line if not present
            sed -i '' '/"test": "echo \\"Error: no test specified\\" && exit 1"/s/$/,/' package.json
            
            # Add the start script after the test script
            sed -i '' '/"test": "echo \\"Error: no test specified\\" && exit 1",/a\
    "start": "node ./dist/App.js"' package.json
        else
            # If "scripts" does not exist, add it
            sed -i '' '/"main":/a\
  "scripts": {\n    "start": "node ./dist/App.js"\n  },' package.json
        fi
        
        echo '"start": "node ./dist/App.js" has been added to package.json scripts section.'
        echo "--------------------------------------------------"
    else
        echo "npm was not initialized."
        echo "--------------------------------------------------"
    fi
fi

# Check if TypeScript is initialized by looking for tsconfig.json
if [ ! -f tsconfig.json ]; then
    echo "--------------------------------------------------"
    
    # Check if 'tsc' command is available
    if ! command -v tsc &> /dev/null; then
        echo "TypeScript (tsc) is not installed globally. Please install it by running:"
        echo "npm install -g typescript"
        echo "--------------------------------------------------"
        exit 1
    fi

    read -p "TypeScript is not initialized. Would you like to initialize TypeScript? (y/n): " init_tsc
    if [[ "$init_tsc" =~ ^[Yy]$ ]]; then
        # Initialize TypeScript
        tsc --init
        echo "TypeScript has been initialized (tsconfig.json created)."
        
        # Create src and dist directories
        mkdir -p src dist
        echo "Directories 'src' and 'dist' have been created."

        # Edit tsconfig.json to set rootDir and outDir
        # Uncomment and modify the "rootDir" and "outDir" lines
        sed -i '' 's|// "rootDir":.*|  "rootDir": "./src",|' tsconfig.json
        sed -i '' 's|// "outDir":.*|  "outDir": "./dist",|' tsconfig.json

        echo "tsconfig.json has been updated: rootDir is './src', outDir is './dist'."
        echo "--------------------------------------------------"
    else
        echo "TypeScript was not initialized."
        echo "--------------------------------------------------"
    fi
fi


# Check if the current directory is a git repository
if [ ! -d .git ]; then
    echo "--------------------------------------------------"
    echo "Initializing git..."
    git init > /dev/null 2>&1

    echo "Git initialized."
    echo "--------------------------------------------------"
fi

# Check if the local repository is linked with the remote one
a=$(git remote)
b=origin
if [ "$a" != "$b" ]; then
    echo "Linking the local repository with the remote one..."
    echo "Enter the URL of the remote repository: "
    read url
    git remote add origin $url
    echo "Local repository linked with the remote one."
    echo "--------------------------------------------------"
    git branch -M main
    echo "Branch renamed to main."
    echo "--------------------------------------------------"
fi

# Check if the .gitignore file exists
# Define the default entries that should be in .gitignore
default_entries=(
"venv/"
".idea/"
".git/"
"node_modules/"
".vscode"
".DS_Store"
"config.codekit3"
".gitignore"
"dist/"
)
# Flag to track if any changes were made
changes_made=false

if [ ! -f .gitignore ]; then
    echo "Creating .gitignore..."
    
    # Create the default .gitignore
    for entry in "${default_entries[@]}"; do
        echo "$entry" >> .gitignore
    done
    changes_made=true

    echo ".gitignore created with the following contents:"
    cat .gitignore
    echo "--------------------------------------------------"
else
    echo ".gitignore already exists."
    echo "--------------------------------------------------"
    # Check if all default entries are present, and add any that are missing
    missing_entries=()
    for entry in "${default_entries[@]}"; do
        if ! grep -qx "$entry" .gitignore; then
            missing_entries+=("$entry")
        fi
    done

    if [ ${#missing_entries[@]} -gt 0 ]; then
        echo "Adding missing default entries to .gitignore:"
        for entry in "${missing_entries[@]}"; do
            echo "$entry" >> .gitignore
            echo "Added: $entry"
        done
        changes_made=true
        echo "--------------------------------------------------"
    else
        echo "No missing entries in .gitignore."
        echo "--------------------------------------------------"
    fi
fi
# Display updated .gitignore contents only if there were changes
if [ "$changes_made" = true ]; then
    echo "Updated .gitignore contents:"
    cat .gitignore
    echo "--------------------------------------------------"
fi
# Ask if the user wants to add more entries
while true; do
    read -p "Would you like to add anything else to .gitignore? (y/n): " add_more

    if [[ "$add_more" =~ ^[Yy]$ ]]; then
        read -p "Enter the pattern or file/folder to add: " new_entry
        # Check if the entry is already in .gitignore
        if ! grep -qx "$new_entry" .gitignore; then
            echo "$new_entry" >> .gitignore
            changes_made=true
            echo "Updated .gitignore contents:"
            cat .gitignore
            echo "--------------------------------------------------"
        else
            echo "Entry '$new_entry' already exists in .gitignore."
        fi
    elif [[ "$add_more" =~ ^[Nn]$ ]]; then
        if [ "$changes_made" = false ]; then
            echo "No changes were made to .gitignore."
        else
            echo "Final .gitignore contents:"
            cat .gitignore
        fi
        echo "--------------------------------------------------"
        break
    else
        echo "Invalid input, please enter 'y' or 'n'."
    fi
done

# Check if there are any changes to commit
if [ -n "$(git add . -n)" ]; then
    echo "Adding and committing the changes..."
    echo "Enter the commit message: "
    read message
    git add .
    git commit -m "$message" > /dev/null 2>&1
    echo "Changes added and committed."
    echo "--------------------------------------------------"
else
    echo "No changes to commit."
    echo "--------------------------------------------------"
fi

# Push the possible changes to the remote repository
echo "Git push state..."
if [ -z "$(git branch -r)" ]; then
    git push -uq origin main > /dev/null 2>&1
else
    git push -q > /dev/null 2>&1
fi
echo "--------------------------------------------------"
echo "             All automation done!"
echo "--------------------------------------------------"

exit 0